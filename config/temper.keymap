/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define Base 0
#define NAV_NUM 1
#define SYM 2
#define FUN 3

&lt {
    flavor = "hold-preferred";
    quick-tap-ms = <180>;
};

/ {
    behaviors {
        hm: hm {
            compatible = "zmk,behavior-hold-tap";
            label = "HM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            quick-tap-ms = <170>;
            tapping-term-ms = <190>;
            global-quick-tap;
            flavor = "tap-preferred";
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 20 21 22 23 24 14 30 31 32 33 34 35 25 15 5 6 16 26 27 17 7 8 18 28 29 19 9>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 10 20 21 1 11 12 2 3 4 24 14 13 23 22 30 31 32 33 34 35 25 26 28 27 29 9 8 7 6 5 15>;
        };
    };

    combos {
        compatible = "zmk,combos";

        bac {
            bindings = <&kp BACKSLASH>;
            key-positions = <3 14>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <15 5>;
            timeout-ms = <30>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <11 12>;
            timeout-ms = <30>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <16 17>;
            timeout-ms = <30>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <12 13>;
            timeout-ms = <30>;
        };

        back {
            bindings = <&kp BACKSPACE>;
            key-positions = <17 18>;
            timeout-ms = <30>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <15 6>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            display-name = "Base";
            bindings = <
  &kp Q            &kp W            &kp E         &kp R              &kp T        &kp Y      &kp U               &kp I         &kp O             &kp P
  &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LCTRL D  &hml LEFT_SHIFT F  &kp G        &kp H      &hmr RIGHT_SHIFT J  &hmr RCTRL K  &hmr RIGHT_ALT L  &hmr RIGHT_GUI SEMICOLON
  &kp Z            &kp X            &kp C         &kp V              &kp B        &kp N      &kp M               &kp COMMA     &kp DOT           &kp FSLH
                                    &none         &lt 2 SPACE        &lt 1 TAB    &kp ENTER  &lt 3 BACKSPACE     &none
            >;
        };

        num {
            display-name = "NUM";
            bindings = <
  &kp N1        &kp N2        &kp N3         &kp N4          &kp N5          &kp N6              &kp N7        &kp N8            &kp N9         &kp N0
  &kp LEFT_GUI  &kp LEFT_ALT  &kp LCTRL      &kp LEFT_SHIFT  &kp CAPSLOCK    &kp LEFT            &kp DOWN      &kp UP            &kp RIGHT      &kp PAGE_UP
  &trans        &trans        &kp LC(LG(C))  &trans          &kp ESC         &kp LG(LEFT_ARROW)  &kp LG(DOWN)  &kp LG(UP_ARROW)  &kp RG(RIGHT)  &kp PAGE_DOWN
                              &trans         &trans          &trans          &trans              &trans        &trans
            >;
        };

        sym {
            display-name = "SYM";
            bindings = <
  &kp EXCLAMATION    &kp AT           &kp HASH       &kp DOLLAR      &kp PERCENT     &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
  &kp LEFT_BRACKET   &kp LEFT_BRACE   &kp PIPE       &kp LEFT_SHIFT  &kp CAPSLOCK    &kp PLUS   &kp MINUS      &kp GRAVE     &kp SLASH             &kp SINGLE_QUOTE
  &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp LG(LC(C))  &trans          &kp ESC         &kp EQUAL  &kp UNDER      &kp TILDE     &kp BACKSLASH         &kp DOUBLE_QUOTES
                                      &trans         &trans          &trans          &trans     &trans         &trans
            >;
        };

        fun {
            bindings = <
  &kp F1   &kp F2   &kp F3  &kp F4  &kp F5    &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
  &kp F11  &kp F12  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans   &trans   &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                    &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "FUN";
        };

        sys {
            bindings = <
  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4      &trans           &trans  &trans  &trans  &trans
  &trans        &trans        &out OUT_TOG  &bt BT_CLR    &bt BT_CLR_ALL    &kp C_VOLUME_UP  &trans  &trans  &trans  &trans
  &bootloader   &trans        &trans        &trans        &trans            &kp C_VOL_DN     &trans  &trans  &trans  &bootloader
                              &trans        &trans        &trans            &trans           &trans  &trans
            >;

            display-name = "SYS";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        bt {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};
